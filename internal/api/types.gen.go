// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for Button.
const (
	Down  Button = "down"
	Left  Button = "left"
	Right Button = "right"
	Up    Button = "up"
)

// Defines values for HealthStatus.
const (
	Draining HealthStatus = "draining"
	Ready    HealthStatus = "ready"
)

// Button defines model for Button.
type Button string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Health defines model for Health.
type Health struct {
	Status  HealthStatus `json:"status"`
	Version string       `json:"version"`
}

// HealthStatus defines model for Health.Status.
type HealthStatus string

// InternalError defines model for InternalError.
type InternalError = Error

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yUzW7bMAzHX0XgdvSirN2h8GkfKNYM29BtvRU9KDJtK5MljaLTBoXffZDsfLTpsALb",
	"KY5I/kj+KeoetO+Cd+g4QnkPhDF4FzH/WThGcsqeE3lKB9o7RsfpU4VgjVZsvJOr6F06i7rFTqWvl4Q1",
	"lPBC7ulytEY50oZhKKDCqMmEBIESeod3ATVjJXDyKSZmLud9zzwmQtd3UF5DH6CAyt86KMBizVAAmaZl",
	"uCmANwGhhMhkXANDAbsuAvmAxGZsUvsK02/tqVMMJRjHpyewAxjH2CAlQocxqiZ7P6IPBRD+6g1hlerK",
	"zL3/vhq/XKHmxLpAZbk9Liey4j4eNkmoqk3qk5RxKdtTza2RopnEuVNdsMm8fj2bz+ZQ/KXaKeUeclxv",
	"CjGu9ttLoHS+BNgpYxP4FhVvlmSqBt826XCmfQcFONUlzDejvLhQaUw9pYCWOcRSysZw2y+TszxkwNHd",
	"eHe5ELUnEczKJzGs0ehiHsWU48vi6rl4mSlyaf1Sdso4+Xnx4fzrj/OUlg1n7bLLKxXMgS4ljIIOBfiA",
	"LhlLOJ00DorbPDfZ7kbbYJbpYSvfkXtyUUSktdEoJrpQrhJjqBgnMoOch/KSLSoo4SPydG+Kh5t6Mp//",
	"t/2cMjyxoFN128zjlGrVW/4Tc1ekfPiWDJkuV34T2eif8n6Zd3vI++DjE6pdEsaYNSK0qCIKJcYg4Z3g",
	"FsUWdixbjv00mfOoSHXISBHK68eJrjYBha+3cPYipPBENcme5ry/2aMXHC4UU4/FM7WenrRhuDka6Jtj",
	"Da5a3JZ1q+JYF1Yi9lpjjHVv7Wb2j0NJLy7SeivNfp1KKa3XyrY+cnk2P0tb8MhOKoYlEm2CmWXfye9m",
	"+B0AAP//ZB6Ln2YGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
